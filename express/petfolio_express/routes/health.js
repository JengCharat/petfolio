const express = require("express");
const router = express.Router();
const HealthRecord = require("../models/HealthRecord");
const Pet = require("../models/pet");
const User = require("../models/User");

// üìå GET: ‡∏î‡∏∂‡∏á health records ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  try {
    const records = await HealthRecord.find()
      .populate("pet")
      .populate("owner", "username email")
      .sort({ date: -1 });

    res.json(records);
  } catch (err) {
    console.error("‚ùå GET /api/health error:", err);
    res.status(500).json({ error: "Failed to fetch records" });
  }
});

// ‚ûï POST: ‡πÄ‡∏û‡∏¥‡πà‡∏° health record
router.post("/", async (req, res) => {
  try {
    const { pet, type, date, clinic, detail, cost, ownerUserId } = req.body;

    // ‡∏´‡∏≤ user object ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ownerUserId
    const user = await User.findOne({ userId: ownerUserId });
    if (!user) return res.status(404).json({ error: "User not found" });

    const newRecord = await HealthRecord.create({
      pet,
      type,
      date,
      clinic,
      detail,
      cost,
      owner: user._id,
      ownerUserId,
    });

    res.status(201).json(newRecord);
  } catch (err) {
    console.error("‚ùå POST /api/health error:", err);
    res.status(500).json({ error: "Failed to create record" });
  }
});


// ‚úèÔ∏è PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç health record
router.put("/:id", async (req, res) => {
  try {
    const updated = await HealthRecord.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) return res.status(404).json({ error: "Record not found" });
    res.json(updated);
  } catch (err) {
    console.error("‚ùå PUT /api/health/:id error:", err);
    res.status(500).json({ error: "Failed to update record" });
  }
});

// ‚ùå DELETE: ‡∏•‡∏ö health record
router.delete("/:id", async (req, res) => {
  try {
    const deleted = await HealthRecord.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ error: "Record not found" });
    res.json({ message: `Deleted record ${req.params.id}` });
  } catch (err) {
    console.error("‚ùå DELETE /api/health/:id error:", err);
    res.status(500).json({ error: "Failed to delete record" });
  }
});

// GET /api/health/user/:userId ‚Üí ‡∏î‡∏∂‡∏á health records ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
router.get("/user/:userId", async (req, res) => {
  const { userId } = req.params;

  try {
    console.log("Fetching health records for userId:", userId);

    // ‡∏´‡∏≤ user object ‡∏Å‡πà‡∏≠‡∏ô
    const user = await User.findOne({ userId });
    if (!user) return res.status(404).json({ error: "User not found" });

    // ‡∏´‡∏≤ pets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user
    const pets = await Pet.find({ owner: user._id }).select("_id name type");
    const petIds = pets.map((p) => p._id);

    // ‡∏´‡∏≤ health records ‡∏Ç‡∏≠‡∏á pets ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
    const records = await HealthRecord.find({ pet: { $in: petIds } })
      .populate("pet", "name type breed")
      .sort({ date: -1 });

    res.json(records);
  } catch (err) {
    console.error("‚ùå Error fetching health records:", err);
    res.status(500).json({ error: "Failed to fetch records" });
  }
});


module.exports = router;
