const express = require("express");
const multer = require("multer");
const path = require("path");
const CommunityPost = require("../models/communityPost");
const Pet = require("../models/pet");
const User = require("../models/User");

const router = express.Router();

// Serve static folder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ
router.use("/uploads", express.static(path.join(__dirname, "..", "uploads")));

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage, limits: { files: 4 } });

// üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
router.post("/", upload.array("images", 4), async (req, res) => {
  try {
    const { PostDesc, pets, owner } = req.body;

    // ‡∏´‡∏≤ user ‡∏î‡πâ‡∏ß‡∏¢ userId (string)
    const user = await User.findOne({ userId: owner });
    if (!user) return res.status(400).json({ error: "User not found" });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pets ‡∏Ç‡∏≠‡∏á user
    let validPets = [];
    if (pets) {
      const petIds = Array.isArray(pets) ? pets : [pets];
      validPets = await Pet.find({
        _id: { $in: petIds },
        owner: user._id, // owner ‡πÄ‡∏õ‡πá‡∏ô ObjectId
      });
    }

    const files = req.files || [];
    const imagePaths = files.map((file) => `/uploads/${file.filename}`);

    const post = new CommunityPost({
      PostDesc,
      images: imagePaths,
      pets: validPets.map((p) => p._id),
      owner: user._id, // ‡πÄ‡∏Å‡πá‡∏ö ObjectId ‡∏Ç‡∏≠‡∏á user
    });

    await post.save();

    // populate pets ‡πÅ‡∏•‡∏∞ owner
    const populatedPost = await CommunityPost.findById(post._id)
      .populate("pets")
      .populate({ path: "owner", select: "username userId" });

    res.status(201).json(populatedPost);
  } catch (err) {
    console.error("‚ùå Error creating post:", err);
    res.status(500).json({ error: err.message });
  }
});

// üìå ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  try {
    const posts = await CommunityPost.find()
      .populate("pets")
      .populate({ path: "owner", select: "username userId" });

    const postsWithUser = posts.map((post) => ({
      ...post.toObject(),
      ownerUsername: post.owner ? post.owner.username : "Unknown",
    }));

    res.json(postsWithUser);
  } catch (err) {
    console.error("‚ùå Error fetching posts:", err);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

// GET posts ‡∏Ç‡∏≠‡∏á user ‡∏ï‡∏≤‡∏° userId
router.get("/user/:userId", async (req, res) => {
  try {
    const userId = req.params.userId;

    // 1. ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å userId
    const user = await User.findOne({ userId: userId }); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ field ‡πÉ‡∏ô User ‡∏Ñ‡∏∑‡∏≠ userId
    if (!user) return res.status(404).json({ message: "User not found" });

    // 2. ‡πÄ‡∏≠‡∏≤ _id ‡∏Ç‡∏≠‡∏á user ‡πÄ‡∏õ‡πá‡∏ô ObjectId
    const ownerId = user._id;

    // 3. ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏î‡∏¢ owner ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤
    const posts = await CommunityPost.find({ owner: ownerId }).sort({ createdAt: -1 });

    res.json(posts);
  } catch (error) {
    console.error("Error fetching user posts:", error);
    res.status(500).json({ message: "Server error" });
  }
});





module.exports = router;
