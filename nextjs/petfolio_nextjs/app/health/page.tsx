"use client";
import { useEffect, useState } from "react";
import Navbar from "../components/Navbar";

type Treatment =
  | "vaccine" | "deworming" | "grooming" | "nail_trim"
  | "dental" | "checkup" | "treatment" | "ticks_and_fleas" | "other";

type Pet = {
  _id: string;
  name: string;
  type?: string;
  emoji?: string;
};

type HealthRecord = {
  _id: string;
  pet: Pet | string;
  type: Treatment;
  date: string;
  clinic?: string;
  detail?: string;
  cost: number;
};

const BASE_URL = "http://localhost:3002/api";

const treatmentLabels: Record<Treatment, string> = {
  vaccine: "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô üíâ",
  deworming: "‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ò‡∏¥ üíä",
  grooming: "‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥/‡∏ï‡∏±‡∏î‡∏Ç‡∏ô ‚úÇÔ∏è",
  nail_trim: "‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏ö üíÖ",
  dental: "‡∏ó‡∏≥‡∏ü‡∏±‡∏ô ü¶∑",
  checkup: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û üè•",
  treatment: "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ ü©∫",
  ticks_and_fleas: "‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏´‡πá‡∏ö‡∏´‡∏°‡∏±‡∏î üï∑Ô∏è",
  other: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ üìù",
};

export default function HealthApp() {
  const [records, setRecords] = useState<HealthRecord[]>([]);
  const [pets, setPets] = useState<Pet[]>([]);

  // modal states
  const [showModal, setShowModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState<HealthRecord | null>(null);
  const [editingRecord, setEditingRecord] = useState<HealthRecord | null>(null);

  const [form, setForm] = useState({
    pet: "",
    type: "",
    date: "",
    clinic: "",
    detail: "",
    cost: 0,
  });

  // ‡πÇ‡∏´‡∏•‡∏î Health Records
  const loadRecords = () => {
    fetch(`${BASE_URL}/health`)
      .then((res) => res.json())
      .then((data) => setRecords(Array.isArray(data) ? data : []))
      .catch((err) => console.error("fetch health error:", err));
  };

  // ‡πÇ‡∏´‡∏•‡∏î Pets
  const loadPets = () => {
    fetch(`${BASE_URL}/pets`)
      .then((res) => res.json())
      .then((data) => setPets(Array.isArray(data) ? data : []))
      .catch((err) => console.error("fetch pets error:", err));
  };

  useEffect(() => {
    loadRecords();
    loadPets();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Form
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const addRecord = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch(`${BASE_URL}/health`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });
    if (res.ok) {
      loadRecords();
      setShowModal(false);
      resetForm();
    }
  };

  const editRecord = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingRecord) return;
    const res = await fetch(`${BASE_URL}/health/${editingRecord._id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });
    if (res.ok) {
      loadRecords();
      setShowEditModal(false);
      setEditingRecord(null);
      resetForm();
    }
  };

  const deleteRecord = async (id: string) => {
    if (!confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö?")) return;
    const res = await fetch(`${BASE_URL}/health/${id}`, { method: "DELETE" });
    if (res.ok) loadRecords();
  };

  const openEditModal = (rec: HealthRecord) => {
    setEditingRecord(rec);
    setForm({
      pet: typeof rec.pet === "object" ? rec.pet._id : rec.pet,
      type: rec.type,
      date: rec.date.split("T")[0],
      clinic: rec.clinic ?? "",
      detail: rec.detail ?? "",
      cost: rec.cost ?? 0,
    });
    setShowEditModal(true);
  };

  const resetForm = () => {
    setForm({ pet: "", type: "", date: "", clinic: "", detail: "", cost: 0 });
  };

  return (
    <>
      <Navbar />
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
          <button
            onClick={() => setShowModal(true)}
            className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-xl font-medium shadow-lg"
          >
            ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>

        {/* Records Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {records.map((rec) => (
            <div key={rec._id} className="p-4 bg-white rounded-lg shadow">
              <h3 className="text-lg font-semibold">
                {typeof rec.pet === "object" ? rec.pet.name : rec.pet}
              </h3>
              <p>{treatmentLabels[rec.type]}</p>
              <p className="text-sm text-gray-500">{rec.date}</p>
              <div className="flex gap-2 mt-3">
                <button
                  className="bg-blue-500 text-white px-3 py-1 rounded"
                  onClick={() => {
                    setSelectedRecord(rec);
                    setShowDetailModal(true);
                  }}
                >
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </button>
                <button
                  className="bg-yellow-500 text-white px-3 py-1 rounded"
                  onClick={() => openEditModal(rec)}
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
                <button
                  className="bg-red-600 text-white px-3 py-1 rounded"
                  onClick={() => deleteRecord(rec._id)}
                >
                  ‡∏•‡∏ö
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Modal ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
        {(showModal || showEditModal) && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-2xl w-full p-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">
                {showEditModal ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"}
              </h2>
              <form onSubmit={showEditModal ? editRecord : addRecord} className="space-y-6">
                <select
                  name="pet"
                  value={form.pet}
                  onChange={handleChange}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                  required
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</option>
                  {pets.map((p) => (
                    <option key={p._id} value={p._id}>
                      {p.name} {p.emoji ?? ""} {p.type ? `(${p.type})` : ""}
                    </option>
                  ))}
                </select>

                <select
                  name="type"
                  value={form.type}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                  {Object.entries(treatmentLabels).map(([k, v]) => (
                    <option key={k} value={k}>{v}</option>
                  ))}
                </select>

                <input
                  type="date"
                  name="date"
                  value={form.date}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                />
                <input
                  name="clinic"
                  value={form.clinic}
                  onChange={handleChange}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                />
                <textarea
                  name="detail"
                  value={form.detail}
                  onChange={handleChange}
                  placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                />
                <input
                  type="number"
                  name="cost"
                  value={form.cost}
                  onChange={handleChange}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl"
                  placeholder="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"
                  min={0}
                />

                <div className="flex justify-end gap-2">
                  <button
                    type="button"
                    onClick={() => {
                      setShowModal(false);
                      setShowEditModal(false);
                      setEditingRecord(null);
                      resetForm();
                    }}
                    className="px-4 py-2 border rounded"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-600 text-white rounded"
                  >
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
        {showDetailModal && selectedRecord && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-white p-6 rounded-xl max-w-md w-full">
              <h3 className="text-xl font-bold mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h3>
              <p><strong>‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:</strong>{" "}
                {typeof selectedRecord.pet === "object"
                  ? selectedRecord.pet.name
                  : selectedRecord.pet}
              </p>
              <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {treatmentLabels[selectedRecord.type]}</p>
              <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {selectedRecord.date}</p>
              <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> {selectedRecord.clinic || "-"}</p>
              <p><strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> {selectedRecord.detail || "-"}</p>
              <p><strong>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢:</strong> {selectedRecord.cost} ‡∏ö‡∏≤‡∏ó</p>
              <div className="mt-4 text-right">
                <button
                  onClick={() => setShowDetailModal(false)}
                  className="px-4 py-2 bg-green-600 text-white rounded"
                >
                  ‡∏õ‡∏¥‡∏î
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}